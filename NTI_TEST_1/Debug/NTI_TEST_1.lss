
NTI_TEST_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000346  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000346  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000378  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bd8  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000765  00000000  00000000  0000101c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000055d  00000000  00000000  00001781  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d4  00000000  00000000  00001ce0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e8  00000000  00000000  00001db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003c1  00000000  00000000  0000229c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  0000265d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ef       	ldi	r30, 0xF2	; 242
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 89 00 	call	0x112	; 0x112 <main>
  7a:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <seven_seg_init>:
#include "seven segment bcd.h"


void seven_seg_init(void)
{
	dio_vidConfigChannel(SEG_COM1_PORT,SEG_COM1_PIN,OUTPUT);
  82:	41 e0       	ldi	r20, 0x01	; 1
  84:	63 e0       	ldi	r22, 0x03	; 3
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	0e 94 9d 00 	call	0x13a	; 0x13a <dio_vidConfigChannel>
	dio_vidConfigChannel(SEG_COM2_PORT,SEG_COM2_PIN,OUTPUT);
  8c:	41 e0       	ldi	r20, 0x01	; 1
  8e:	62 e0       	ldi	r22, 0x02	; 2
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	0e 94 9d 00 	call	0x13a	; 0x13a <dio_vidConfigChannel>
	dio_vidConfigChannel(SEG_COM3_PORT,SEG_COM3_PIN,OUTPUT);
  96:	41 e0       	ldi	r20, 0x01	; 1
  98:	65 e0       	ldi	r22, 0x05	; 5
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	0e 94 9d 00 	call	0x13a	; 0x13a <dio_vidConfigChannel>
	dio_vidConfigChannel(SEG_COM4_PORT,SEG_COM4_PIN,OUTPUT);
  a0:	41 e0       	ldi	r20, 0x01	; 1
  a2:	66 e0       	ldi	r22, 0x06	; 6
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	0e 94 9d 00 	call	0x13a	; 0x13a <dio_vidConfigChannel>
	
	dio_vidConfigChannel(SEG_A_PORT,SEG_A_CHANNEL,OUTPUT);
  aa:	41 e0       	ldi	r20, 0x01	; 1
  ac:	60 e0       	ldi	r22, 0x00	; 0
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	0e 94 9d 00 	call	0x13a	; 0x13a <dio_vidConfigChannel>
	dio_vidConfigChannel(SEG_B_PORT,SEG_B_CHANNEL,OUTPUT);
  b4:	41 e0       	ldi	r20, 0x01	; 1
  b6:	61 e0       	ldi	r22, 0x01	; 1
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	0e 94 9d 00 	call	0x13a	; 0x13a <dio_vidConfigChannel>
	dio_vidConfigChannel(SEG_C_PORT,SEG_C_CHANNEL,OUTPUT);
  be:	41 e0       	ldi	r20, 0x01	; 1
  c0:	62 e0       	ldi	r22, 0x02	; 2
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	0e 94 9d 00 	call	0x13a	; 0x13a <dio_vidConfigChannel>
	dio_vidConfigChannel(SEG_D_PORT,SEG_D_CHANNEL,OUTPUT);
  c8:	41 e0       	ldi	r20, 0x01	; 1
  ca:	64 e0       	ldi	r22, 0x04	; 4
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	0e 94 9d 00 	call	0x13a	; 0x13a <dio_vidConfigChannel>
  d2:	08 95       	ret

000000d4 <seven_seg_write>:
	
}

void seven_seg_write(u8 value)
{
  d4:	cf 93       	push	r28
  d6:	c8 2f       	mov	r28, r24
	
		dio_vidWriteChannel(SEG_A_PORT,SEG_A_CHANNEL,CHECK_BIT(value,0));
  d8:	48 2f       	mov	r20, r24
  da:	41 70       	andi	r20, 0x01	; 1
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	0e 94 0a 01 	call	0x214	; 0x214 <dio_vidWriteChannel>
		dio_vidWriteChannel(SEG_B_PORT,SEG_B_CHANNEL,CHECK_BIT(value,1));
  e4:	c1 fb       	bst	r28, 1
  e6:	44 27       	eor	r20, r20
  e8:	40 f9       	bld	r20, 0
  ea:	61 e0       	ldi	r22, 0x01	; 1
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	0e 94 0a 01 	call	0x214	; 0x214 <dio_vidWriteChannel>
		dio_vidWriteChannel(SEG_C_PORT,SEG_C_CHANNEL,CHECK_BIT(value,2));
  f2:	c2 fb       	bst	r28, 2
  f4:	44 27       	eor	r20, r20
  f6:	40 f9       	bld	r20, 0
  f8:	62 e0       	ldi	r22, 0x02	; 2
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	0e 94 0a 01 	call	0x214	; 0x214 <dio_vidWriteChannel>
		dio_vidWriteChannel(SEG_D_PORT,SEG_D_CHANNEL,CHECK_BIT(value,3));
 100:	c3 fb       	bst	r28, 3
 102:	44 27       	eor	r20, r20
 104:	40 f9       	bld	r20, 0
 106:	64 e0       	ldi	r22, 0x04	; 4
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	0e 94 0a 01 	call	0x214	; 0x214 <dio_vidWriteChannel>
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <main>:
// 				
// 	/*lcd_vidDisplyChar()*/
// 		//lcd_vidDisplyStr(name);
// 		//_delay_ms(100);
// 		//lcd_vidDisplyStr("elsay");
	seven_seg_init();
 112:	0e 94 41 00 	call	0x82	; 0x82 <seven_seg_init>
	
	

    while (1) 
    {
		for (i=0 ; i<10 ; i++)
 116:	c0 e0       	ldi	r28, 0x00	; 0
 118:	0d c0       	rjmp	.+26     	; 0x134 <main+0x22>
		{
			seven_seg_write(i);
 11a:	8c 2f       	mov	r24, r28
 11c:	0e 94 6a 00 	call	0xd4	; 0xd4 <seven_seg_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	83 ec       	ldi	r24, 0xC3	; 195
 124:	99 e0       	ldi	r25, 0x09	; 9
 126:	21 50       	subi	r18, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <main+0x14>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x1e>
 130:	00 00       	nop
	
	

    while (1) 
    {
		for (i=0 ; i<10 ; i++)
 132:	cf 5f       	subi	r28, 0xFF	; 255
 134:	ca 30       	cpi	r28, 0x0A	; 10
 136:	88 f3       	brcs	.-30     	; 0x11a <main+0x8>
 138:	ee cf       	rjmp	.-36     	; 0x116 <main+0x4>

0000013a <dio_vidConfigChannel>:
					 direction -> MC channel direction
* \Return value:   : None                            
*******************************************************************************/
void dio_vidConfigChannel(dio_portId_t port, dio_channelId_t channel, dio_direction_t direction)
{
	switch (port)
 13a:	81 30       	cpi	r24, 0x01	; 1
 13c:	01 f1       	breq	.+64     	; 0x17e <dio_vidConfigChannel+0x44>
 13e:	30 f0       	brcs	.+12     	; 0x14c <dio_vidConfigChannel+0x12>
 140:	82 30       	cpi	r24, 0x02	; 2
 142:	b1 f1       	breq	.+108    	; 0x1b0 <dio_vidConfigChannel+0x76>
 144:	83 30       	cpi	r24, 0x03	; 3
 146:	09 f4       	brne	.+2      	; 0x14a <dio_vidConfigChannel+0x10>
 148:	4c c0       	rjmp	.+152    	; 0x1e2 <dio_vidConfigChannel+0xa8>
 14a:	08 95       	ret
	{
	case DIO_PORTA:
		if (direction == OUTPUT)
 14c:	41 30       	cpi	r20, 0x01	; 1
 14e:	59 f4       	brne	.+22     	; 0x166 <dio_vidConfigChannel+0x2c>
		{
			SET_BIT (DIO_DDRA_REG,channel);
 150:	2a b3       	in	r18, 0x1a	; 26
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <dio_vidConfigChannel+0x22>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <dio_vidConfigChannel+0x1e>
 160:	82 2b       	or	r24, r18
 162:	8a bb       	out	0x1a, r24	; 26
 164:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRA_REG,channel);
 166:	2a b3       	in	r18, 0x1a	; 26
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <dio_vidConfigChannel+0x38>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <dio_vidConfigChannel+0x34>
 176:	80 95       	com	r24
 178:	82 23       	and	r24, r18
 17a:	8a bb       	out	0x1a, r24	; 26
 17c:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (direction == OUTPUT)
 17e:	41 30       	cpi	r20, 0x01	; 1
 180:	59 f4       	brne	.+22     	; 0x198 <dio_vidConfigChannel+0x5e>
		{
			SET_BIT (DIO_DDRB_REG,channel);
 182:	27 b3       	in	r18, 0x17	; 23
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	02 c0       	rjmp	.+4      	; 0x18e <dio_vidConfigChannel+0x54>
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	6a 95       	dec	r22
 190:	e2 f7       	brpl	.-8      	; 0x18a <dio_vidConfigChannel+0x50>
 192:	82 2b       	or	r24, r18
 194:	87 bb       	out	0x17, r24	; 23
 196:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRB_REG,channel);
 198:	27 b3       	in	r18, 0x17	; 23
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <dio_vidConfigChannel+0x6a>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	6a 95       	dec	r22
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <dio_vidConfigChannel+0x66>
 1a8:	80 95       	com	r24
 1aa:	82 23       	and	r24, r18
 1ac:	87 bb       	out	0x17, r24	; 23
 1ae:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (direction == OUTPUT)
 1b0:	41 30       	cpi	r20, 0x01	; 1
 1b2:	59 f4       	brne	.+22     	; 0x1ca <dio_vidConfigChannel+0x90>
		{
			SET_BIT (DIO_DDRC_REG,channel);
 1b4:	24 b3       	in	r18, 0x14	; 20
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <dio_vidConfigChannel+0x86>
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	6a 95       	dec	r22
 1c2:	e2 f7       	brpl	.-8      	; 0x1bc <dio_vidConfigChannel+0x82>
 1c4:	82 2b       	or	r24, r18
 1c6:	84 bb       	out	0x14, r24	; 20
 1c8:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRC_REG,channel);
 1ca:	24 b3       	in	r18, 0x14	; 20
 1cc:	81 e0       	ldi	r24, 0x01	; 1
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <dio_vidConfigChannel+0x9c>
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	6a 95       	dec	r22
 1d8:	e2 f7       	brpl	.-8      	; 0x1d2 <dio_vidConfigChannel+0x98>
 1da:	80 95       	com	r24
 1dc:	82 23       	and	r24, r18
 1de:	84 bb       	out	0x14, r24	; 20
 1e0:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (direction == OUTPUT)
 1e2:	41 30       	cpi	r20, 0x01	; 1
 1e4:	59 f4       	brne	.+22     	; 0x1fc <dio_vidConfigChannel+0xc2>
		{
			SET_BIT (DIO_DDRD_REG,channel);
 1e6:	21 b3       	in	r18, 0x11	; 17
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	02 c0       	rjmp	.+4      	; 0x1f2 <dio_vidConfigChannel+0xb8>
 1ee:	88 0f       	add	r24, r24
 1f0:	99 1f       	adc	r25, r25
 1f2:	6a 95       	dec	r22
 1f4:	e2 f7       	brpl	.-8      	; 0x1ee <dio_vidConfigChannel+0xb4>
 1f6:	82 2b       	or	r24, r18
 1f8:	81 bb       	out	0x11, r24	; 17
 1fa:	08 95       	ret
		}
		else
		{
			CLEAR_BIT (DIO_DDRD_REG,channel);
 1fc:	21 b3       	in	r18, 0x11	; 17
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <dio_vidConfigChannel+0xce>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	6a 95       	dec	r22
 20a:	e2 f7       	brpl	.-8      	; 0x204 <dio_vidConfigChannel+0xca>
 20c:	80 95       	com	r24
 20e:	82 23       	and	r24, r18
 210:	81 bb       	out	0x11, r24	; 17
 212:	08 95       	ret

00000214 <dio_vidWriteChannel>:
					 level    -> MC channel level
* \Return value:   : None                            
*******************************************************************************/
void dio_vidWriteChannel(dio_portId_t port, dio_channelId_t channel, dio_level_t level)
{
	switch (port)
 214:	81 30       	cpi	r24, 0x01	; 1
 216:	01 f1       	breq	.+64     	; 0x258 <dio_vidWriteChannel+0x44>
 218:	30 f0       	brcs	.+12     	; 0x226 <dio_vidWriteChannel+0x12>
 21a:	82 30       	cpi	r24, 0x02	; 2
 21c:	b1 f1       	breq	.+108    	; 0x28a <dio_vidWriteChannel+0x76>
 21e:	83 30       	cpi	r24, 0x03	; 3
 220:	09 f4       	brne	.+2      	; 0x224 <dio_vidWriteChannel+0x10>
 222:	4c c0       	rjmp	.+152    	; 0x2bc <dio_vidWriteChannel+0xa8>
 224:	08 95       	ret
	{
	case DIO_PORTA:
		if (level == STD_LOW)
 226:	41 11       	cpse	r20, r1
 228:	0c c0       	rjmp	.+24     	; 0x242 <dio_vidWriteChannel+0x2e>
		{
			CLEAR_BIT(DIO_PORTA_REG,channel);
 22a:	2b b3       	in	r18, 0x1b	; 27
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <dio_vidWriteChannel+0x22>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <dio_vidWriteChannel+0x1e>
 23a:	80 95       	com	r24
 23c:	82 23       	and	r24, r18
 23e:	8b bb       	out	0x1b, r24	; 27
 240:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTA_REG,channel);
 242:	2b b3       	in	r18, 0x1b	; 27
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	02 c0       	rjmp	.+4      	; 0x24e <dio_vidWriteChannel+0x3a>
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	6a 95       	dec	r22
 250:	e2 f7       	brpl	.-8      	; 0x24a <dio_vidWriteChannel+0x36>
 252:	82 2b       	or	r24, r18
 254:	8b bb       	out	0x1b, r24	; 27
 256:	08 95       	ret
		}
		break;

	case DIO_PORTB:
		if (level == STD_LOW)
 258:	41 11       	cpse	r20, r1
 25a:	0c c0       	rjmp	.+24     	; 0x274 <dio_vidWriteChannel+0x60>
		{
			CLEAR_BIT(DIO_PORTB_REG,channel);
 25c:	28 b3       	in	r18, 0x18	; 24
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 c0       	rjmp	.+4      	; 0x268 <dio_vidWriteChannel+0x54>
 264:	88 0f       	add	r24, r24
 266:	99 1f       	adc	r25, r25
 268:	6a 95       	dec	r22
 26a:	e2 f7       	brpl	.-8      	; 0x264 <dio_vidWriteChannel+0x50>
 26c:	80 95       	com	r24
 26e:	82 23       	and	r24, r18
 270:	88 bb       	out	0x18, r24	; 24
 272:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTB_REG,channel);
 274:	28 b3       	in	r18, 0x18	; 24
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 c0       	rjmp	.+4      	; 0x280 <dio_vidWriteChannel+0x6c>
 27c:	88 0f       	add	r24, r24
 27e:	99 1f       	adc	r25, r25
 280:	6a 95       	dec	r22
 282:	e2 f7       	brpl	.-8      	; 0x27c <dio_vidWriteChannel+0x68>
 284:	82 2b       	or	r24, r18
 286:	88 bb       	out	0x18, r24	; 24
 288:	08 95       	ret
		}
		break;

	case DIO_PORTC:
		if (level == STD_LOW)
 28a:	41 11       	cpse	r20, r1
 28c:	0c c0       	rjmp	.+24     	; 0x2a6 <dio_vidWriteChannel+0x92>
		{
			CLEAR_BIT(DIO_PORTC_REG,channel);
 28e:	25 b3       	in	r18, 0x15	; 21
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	02 c0       	rjmp	.+4      	; 0x29a <dio_vidWriteChannel+0x86>
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	6a 95       	dec	r22
 29c:	e2 f7       	brpl	.-8      	; 0x296 <dio_vidWriteChannel+0x82>
 29e:	80 95       	com	r24
 2a0:	82 23       	and	r24, r18
 2a2:	85 bb       	out	0x15, r24	; 21
 2a4:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTC_REG,channel);
 2a6:	25 b3       	in	r18, 0x15	; 21
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <dio_vidWriteChannel+0x9e>
 2ae:	88 0f       	add	r24, r24
 2b0:	99 1f       	adc	r25, r25
 2b2:	6a 95       	dec	r22
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <dio_vidWriteChannel+0x9a>
 2b6:	82 2b       	or	r24, r18
 2b8:	85 bb       	out	0x15, r24	; 21
 2ba:	08 95       	ret
		}
		break;

	case DIO_PORTD:
		if (level == STD_LOW)
 2bc:	41 11       	cpse	r20, r1
 2be:	0c c0       	rjmp	.+24     	; 0x2d8 <dio_vidWriteChannel+0xc4>
		{
			CLEAR_BIT(DIO_PORTD_REG,channel);
 2c0:	22 b3       	in	r18, 0x12	; 18
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <dio_vidWriteChannel+0xb8>
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	6a 95       	dec	r22
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <dio_vidWriteChannel+0xb4>
 2d0:	80 95       	com	r24
 2d2:	82 23       	and	r24, r18
 2d4:	82 bb       	out	0x12, r24	; 18
 2d6:	08 95       	ret
		}
		else
		{
			SET_BIT(DIO_PORTD_REG,channel);
 2d8:	22 b3       	in	r18, 0x12	; 18
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <dio_vidWriteChannel+0xd0>
 2e0:	88 0f       	add	r24, r24
 2e2:	99 1f       	adc	r25, r25
 2e4:	6a 95       	dec	r22
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <dio_vidWriteChannel+0xcc>
 2e8:	82 2b       	or	r24, r18
 2ea:	82 bb       	out	0x12, r24	; 18
 2ec:	08 95       	ret

000002ee <_exit>:
 2ee:	f8 94       	cli

000002f0 <__stop_program>:
 2f0:	ff cf       	rjmp	.-2      	; 0x2f0 <__stop_program>
